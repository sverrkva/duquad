/*
 * qp_structs.h
 *
 *  Created on: Oct 1, 2014
 *      Author: sverre
 */

/** \file
 * Contains the declaration of the structs that are common for the algorithms
 */
#ifndef QP_STRUCTS_H_
#define QP_STRUCTS_H_
#include "typedefs.h"

struct Problem {
	real_t * H;	/**< The Hessian matrix. Dimensions n x n, and has to be positive definite */
	real_t * c; /**< The gradient vector */
	real_t * A; /**< Linear constraints matrix Dimensions m x n */
	real_t * A_t; /**< A transposed */
	real_t * b; /**< Linear constraints vector */
	real_t * lb_hat; /**< The lower bound for the linear constraints */
	real_t * ub_hat; /**< The upper bound for the linear constraints */
	real_t * lb; /**< The lower bound for optimization variable z */
	real_t * ub; /**< The upper bound for optimization variable z */
	real_t * z0; /**< The initial point */
}; /**< Contains all the matrices and vectors used to describe the general QP */

struct Options {
	uint32_t maxiter_outer; /**< Maximum number of iterations in the outer loop */
	uint32_t maxiter_inner; /**< Maximum number of iterations in the inner loop */
	real_t eps_ds; /**< Tolerance for dual suboptimality */
	real_t eps_pf; /**< Tolerance for primal feasibility */
	real_t eps_inner; /**< Tolerance for primal feasibility in the inner problem */
	uint32_t algorithm; /**< Sesifies the algoritm used to solve the problem. Values: 1: DGM last, 2: DGM avg, 3: DFGM last, 4: DFGM avg, 5: ALM last, 6: ALM avg, 7: FALM last, 8: FALM avg */
	real_t rho; /**< Penalty parameter used in ALM and FALM */
}; /**< Option specified by the user. Default values can be found in documentation */

struct Info {
	boolean lb_is_inf;
	boolean ub_is_inf;
	boolean lb_hat_is_inf;
	boolean ub_hat_is_inf;
	real_t eigH_max;
	real_t eigH_min;
	real_t Ld;
	uint32_t problem_case;
	uint32_t pf_vec_length;
};

struct Output {
	uint32_t iterations;
	uint32_t iterations_inner_tot;
	real_t time;
	real_t time_tot_inner;
	uint32_t flag_last_satisfied;	// 0 = ds, 1 = pf
	uint32_t niter_feasible_ds;
	uint32_t niter_feasible_pf;
	uint32_t exitflag_inner; // 1 = feasible point found, 2 = Maximum number of iterations exceeded.
	uint32_t num_exceeded_max_niter_inner; // Totale number of times the inner problem exceeded the number of iterations
	real_t * ds_vector;
	real_t * pf_vector;
};

struct Result {
	real_t * zopt;
	real_t fopt;
	uint32_t exitflag; // 1 = feasible point found, 2 = Maximum number of iterations exceeded.
	real_t * lambda1;
	real_t * lambda2;
	struct Output * out;
};

struct Array{
  real_t * array;
  uint32_t used;
  uint32_t size;
};


#endif /* QP_STRUCTS_H_ */
